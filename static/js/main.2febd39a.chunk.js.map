{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.compoenet.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","handleOnChange","placeholder","type","onChange","App","e","setState","searchFiled","target","value","state","fetch","then","data","json","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUAkBeA,EAbF,SAACC,GACZ,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCETC,G,MAVE,SAACR,GAChB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCMZM,G,MAXG,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,eAAqD,IAArCC,mBAAqC,MAAvB,iBAAuB,EACxE,OACE,uBACEZ,UAAU,SACVa,KAAK,SACLD,YAAaA,EACbE,SAAUH,MCsCDI,G,wDAzCb,aAAe,IAAD,8BACZ,gBAkBFJ,eAAiB,SAACK,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjBtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDAWd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACf,GACL,EAAKS,SAAS,CAAET,SAAUA,S,oBAQhC,WAAU,IAAD,EAC2BkB,KAAKL,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZS,EAAmBnB,EAASoB,QAAO,SAACzB,GAAD,OACvCA,EAAQE,KAAKwB,cAAcC,SAASZ,EAAYW,kBAElD,OACE,sBAAK7B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEY,YAAY,iBACZD,eAAgBe,KAAKf,iBAEvB,cAAC,EAAD,CAAUH,SAAUmB,W,GApCVI,IAAMC,YCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2febd39a.chunk.js","sourcesContent":["import React from 'react';\n\n// css\nimport './card.styles.css';\n\nconst Card = (props) => {\n  return (\n    <div className='card-container'>\n      <img\n        alt='monster'\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from '../card/card.component';\n\nimport './card-list.styles.css';\n\nconst CardList = (props) => {\n  return (\n    <div className='card-list'>\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nimport './search-box.styles.css';\n\nconst SearchBox = ({ handleOnChange, placeholder = 'search monster' }) => {\n  return (\n    <input\n      className='search'\n      type='search'\n      placeholder={placeholder}\n      onChange={handleOnChange}\n    />\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\nimport CardList from './components/card-list/card-list.compoenet';\nimport SearchBox from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchFiled: '',\n    };\n\n    // this.handleOnChange = this.handleOnChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((data) => data.json())\n      .then((monsters) => {\n        this.setState({ monsters: monsters });\n      });\n  }\n\n  handleOnChange = (e) => {\n    this.setState({ searchFiled: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchFiled } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchFiled.toLowerCase())\n    );\n    return (\n      <div className='App'>\n        <h1> Monster Rolodex </h1>\n        <SearchBox\n          placeholder='search monster'\n          handleOnChange={this.handleOnChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}